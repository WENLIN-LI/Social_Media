{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS } from './types';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken'; //load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await api.get('/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //register user\n\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post('/api/users', body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; //login user\n\nexport const login = _ref2 => {\n  let {\n    email,\n    password\n  } = _ref2;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post('/api/auth', body, config);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/liwenlin/Documents/Connector/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","res","api","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_FAIL,\n  LOGIN_SUCCESS,\n} from './types';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken';\n\n//load user\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await api.get('/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n//register user\nexport const register =\n  ({ name, email, password }) =>\n  async (dispatch) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const body = JSON.stringify({ name, email, password });\n\n    try {\n      const res = await axios.post('/api/users', body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n      }\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n    }\n  };\n\n//login user\nexport const login =\n  ({ email, password }) =>\n  async (dispatch) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const body = JSON.stringify({ email, password });\n\n    try {\n      const res = await axios.post('/api/auth', body, config);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data,\n      });\n\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n      }\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}