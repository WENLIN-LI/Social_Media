{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from './types';\n/*\n  NOTE: we don't need a config object for axios as the\n default headers in axios are already Content-Type: application/json\n also axios stringifies and parses JSON for you, so no need for \n JSON.stringify or JSON.parse\n*/\n// Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: CLEAR_PROFILE\n    });\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add like\n\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Remove like\n\nexport const removeLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete post\n\nexport const deletePost = id => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/${id}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n    dispatch(setAlert('Post Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add post\n\nexport const addPost = formData => async dispatch => {\n  try {\n    const res = await axios.post('/api/posts', formData);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get post\n\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add comment\n\nexport const addComment = (postId, formData) => async dispatch => {\n  try {\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete comment\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/liwenlin/Documents/Connector/client/src/actions/post.js"],"names":["axios","setAlert","GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","getPosts","dispatch","res","get","type","GET_PROFILE","payload","data","err","CLEAR_PROFILE","PROFILE_ERROR","msg","response","statusText","status","addLike","id","put","likes","removeLike","deletePost","delete","addPost","formData","post","getPost","addComment","postId","deleteComment","commentId"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n} from './types';\n\n/*\n  NOTE: we don't need a config object for axios as the\n default headers in axios are already Content-Type: application/json\n also axios stringifies and parses JSON for you, so no need for \n JSON.stringify or JSON.parse\n*/\n\n// Get posts\nexport const getPosts = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({ type: CLEAR_PROFILE });\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add like\nexport const addLike = (id) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/api/posts/like/${id}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { id, likes: res.data },\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Remove like\nexport const removeLike = (id) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${id}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { id, likes: res.data },\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete post\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await axios.delete(`/api/posts/${id}`);\n\n    dispatch({\n      type: DELETE_POST,\n      payload: id,\n    });\n\n    dispatch(setAlert('Post Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add post\nexport const addPost = (formData) => async (dispatch) => {\n  try {\n    const res = await axios.post('/api/posts', formData);\n\n    dispatch({\n      type: ADD_POST,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get post\nexport const getPost = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n\n    dispatch({\n      type: GET_POST,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add comment\nexport const addComment = (postId, formData) => async (dispatch) => {\n  try {\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData);\n\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete comment\nexport const deleteComment = (postId, commentId) => async (dispatch) => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId,\n    });\n\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}